<project name="build-cli" default="build.cli" xmlns:antcontrib="antlib:net.sf.antcontrib" basedir=".">

	<!-- define these in say ${user.home}/creds/cfmlprojects.properties and import them prior, if ya wanna sign-->
 	<property name="cfmlprojects.sign.key.passphrase" value="" />
 	<property name="cfmlprojects.sign.key.id" value="" />
 	<property name="cfmlprojects.sign.keyring" value="" />

	<target name="resolve.libs">
		<delete dir="${lib.dir}"/>
 		<mvn-repo id="jboss.repo" url="http://repository.jboss.org/nexus/content/repositories/releases" />
		<!-- 
		<dependency groupId="org.jboss.aesh" artifactId="aesh" unzip="false" version="0.53" type="jar" dest="${lib.dir}" repoId="jboss.repo" />
		<dependency groupId="org.jboss.jreadline" artifactId="jreadline"
			unzip="false" version="0.20" type="jar" dest="${lib.dir}" repoId="jboss.repo">
			<exclusions>
				<exclusion groupId="org.fusesource.jansi" artifactId="jansi" />
			</exclusions>
		</dependency>
		<dependency groupId="org.fusesource.jansi" artifactId="jansi" unzip="false" version="1.11" type="jar" dest="${lib.dir}" />
		 -->
		<dependency groupId="jline" artifactId="jline" version="2.12" dest="${lib.dir}" type="jar" unzip="false"/>
    <dependency groupId="com.beust" artifactId="jcommander" version="1.47" dest="${lib.dir}" type="jar" unzip="false"/>
    <dependency groupId="net.minidev" artifactId="json-smart-mini" version="1.0.8" unzip="false" type="jar" dest="${lib.dir}"/>
	</target>

	<target name="build.cli" description="creates an jar with the libs cli" depends="resolve.libs">
		<antcontrib:var name="cli.version" value="${cli.version}.${railo.version.long}" />
		<echo message="building cli.version ${cli.version}" />
		<version-splitter version="${railo.version.long}" property="railo.version" bump="" />
		<property name="runcli.jar.file" value="${dist.dir}/cli/railo-cli.jar"/>
 		<delete dir="${temp.dir}" />
 		<delete dir="${dist.dir}/cli" />
 		<delete dir="${temp.dir}/cli" />
		<mkdir dir="${temp.dir}/cli" />
		<mkdir dir="${dist.dir}/cli" />
		<!--  compile the loader and the runner together, tho we will separate them into different jars -->
		<property name="railo.lib.dir" value="${temp.dir}/railolibs" />
 		<delete dir="${railo.lib.dir}" />
 		<mkdir dir="${railo.lib.dir}" />
    <!--  copy in runwar to set a custom icon, etc. 
    <copy file="${cfdistro.basedir}/lib/runwar-1.0.0.0.jar" todir="${temp.dir}/cli" />
	  <dependency groupId="org.getrailo" artifactId="railo.dep" classifier="javax-servlet" version="${railo.version.major}.0" dest="${railo.lib.dir}" type="jar" unzip="false"/>
    -->
		<dependency groupId="org.cfmlprojects" artifactId="runwar" version="${cli.runwar.version}" dest="${railo.lib.dir}" unzip="false" type="jar" />
		<dependency groupId="org.getrailo" artifactId="railo.libs" version="${railo.version.major}.0" dest="${railo.lib.dir}" unzip="true"/>
    <dependency groupId="org.getrailo" artifactId="railo-jar" version="${railo.version.long}" dest="${temp.dir}/railolibs" unzip="false" type="jar" />
    <mvn-repo id="java.repo" url="http://download.java.net/maven/2/" />
    <dependency groupId="javax.mail" artifactId="mail" version="1.4.4" dest="${temp.dir}/railolibs" repoId="java.repo" unzip="false" type="jar" />
		<path id="classpath">
			<fileset dir="${railo.lib.dir}"/>
			<fileset dir="${cfdistro.lib.dir}"/>
			<fileset dir="${lib.dir}"/>
		</path>
    <javac-ecj srcdir="${src.dir}/java" destdir="${temp.dir}/cli/bin" maxmemory="128M"
      	compliance="${railo.javac.compiler}" classpath="${toString:classpath}" />
	  <!-- icon for cli -->
    <copy todir="${railo.lib.dir}">
    	<fileset dir="${lib.dir}" includes="*.jar" />
  	</copy>

		<mkdir dir="${temp.dir}/engine" />
		<configure-railo-web 
			config-server="${temp.dir}/engine/cfml/cli/cfml-server/context/railo-server.xml"
			config-web="${temp.dir}/engine/cfml/cli/cfml-web/railo-web.xml.cfm"
			dump-cfc="${temp.dir}/engine/cfml/cli/cfml-server/context/library/tag/Dump.cfc"/>
		<copy file="${src.dir}/resources/error-cli.cfm" todir="${temp.dir}/engine/cfml/cli/cfml-web/context/templates/error/" />
<!-- 
 		<replace file="${temp.dir}/engine/cfml/cfml-server/context/library/tag/Dump.cfc" token="modern&quot;;" value="text&quot;;"/>
 -->
		<antcontrib:var name="railo.config.file" value="${temp.dir}/engine/cfml/cli/cfml-web/railo-web.xml.cfm" />
		<railo-error-template path="/railo-context/templates/error/error-cli.cfm" />
		<copy todir="${temp.dir}/cli/bin/resource">
    	<fileset dir="${src.dir}/resources"/>
  	</copy>
		<zip destfile="${temp.dir}/cli/engine.zip">
    	<fileset dir="${temp.dir}/engine"/>
  	</zip>

		<!-- we put the loader into a jar and then into libs.zip for classloading reasons -->
		<jar destfile="${temp.dir}/cli/railocli.jar" filesetmanifest="mergewithoutmain" level="9">
			<manifest>
				<attribute name="Main-Class" value="railocli.CLIMain" />
			</manifest>
			<fileset dir="${temp.dir}/cli/bin">
				<exclude name="cliloader/*" />
			</fileset>
		</jar>
		<delete dir="${temp.dir}/cli/bin/railocli" />

		<!--  create the cfml zip -->
    <property name="cli.cfml.version" value="${cli.version}" />
    <echo message="adding cfml version ${cli.cfml.version}" />
    <echo file="${temp.dir}/cli/bin/cliloader/cfml.version" message="${cli.cfml.version}"/>
		<zip destfile="${temp.dir}/cli/cfml.zip">
      <fileset dir="${src.dir}/cfml" excludes="**/cfdistro/home/**, **/cfdistro.zip"/>
      <zipfileset file="${temp.dir}/version" fullpath="cli/version"/>
      <zipfileset file="${temp.dir}/cli/bin/cliloader/cfml.version" fullpath=".version"/>
		</zip>

		<!--  create the libs zip including cli loader, optionally use pack200 -->
		<antcontrib:if>
			<equals arg1="${cli.use.pack200}" arg2="true" />
			<then>
				<delete dir="${temp.dir}/packlibs" />
				<mkdir dir="${temp.dir}/packlibs"/>
				<mkdir dir="${temp.dir}/packlibs/packed"/>
				<copy todir="${temp.dir}/packlibs">
			        <fileset dir="${railo.lib.dir}">
			            <include name="**/*.jar"/>
			            <exclude name="**/railo-loader.jar"/>
			            <exclude name="**/javax.servlet.jar"/>
			            <exclude name="**/org.mortbay.jetty.jar"/>
			        </fileset>
			        <fileset file="${temp.dir}/cli/railocli.jar" />
				</copy>
				<packjars dir="${temp.dir}/packlibs" packdir="${temp.dir}/packlibs/packed"/>
				<zip destfile="${temp.dir}/cli/libs.zip">
			        <fileset dir="${temp.dir}/packlibs/packed"/>
				</zip>
				<delete dir="${temp.dir}/packlibs" />
			</then>
			<else>
				<zip destfile="${temp.dir}/cli/libs.zip">
			        <fileset dir="${railo.lib.dir}">
			            <include name="**/*.jar"/>
			            <exclude name="**/railo-loader.jar"/>
			            <exclude name="**/javax.servlet.jar"/>
			        </fileset>
			        <fileset file="${temp.dir}/cli/railocli.jar" />
				</zip>
			</else>
		</antcontrib:if>
		<delete file="${temp.dir}/cli/railocli.jar" />

  	<echo file="${temp.dir}/version" message="${cli.version}" />
    <copy file="${src.dir}/java/cliloader/cli.properties" todir="${temp.dir}/cli/bin/cliloader" />
		<copy todir="${temp.dir}/cli/bin/cliloader" file="${src.dir}/java/cliloader/version.properties">
			<filterchain><expandproperties/><deletecharacters chars="\n"/><trim/><ignoreblank/></filterchain>
		</copy>

		<jar destfile="${runcli.jar.file}" filesetmanifest="mergewithoutmain" level="9">
			<manifest>
				<attribute name="Main-Class" value="cliloader.LoaderCLIMain" />
			</manifest>
			<fileset file="${temp.dir}/cli/libs.zip" />
			<fileset file="${temp.dir}/cli/cfml.zip" />
			<fileset file="${temp.dir}/cli/engine.zip" />
			<fileset dir="${temp.dir}/cli/bin" />
      <zipfileset src="${lib.dir}/json-smart-mini-1.0.8.jar" includes="**/*.class"/>
      <zipfileset file="${temp.dir}/version" fullpath="version"/>
		</jar>
 	</target>

	<target name="build.cli.bin" description="creates an jar with the libs cli" depends="build.cli">
        <concat destfile="${dist.dir}/cli/railo" force="yes" binary="true">
          <fileset file="${src.dir}/bin/railo.sh" />
          <fileset file="${dist.dir}/cli/railo-cli.jar" />
        </concat>
        <chmod file="${dist.dir}/cli/railo" perm="a+x"/>
		<zip destfile="${dist.dir}/cli/railo.bin.zip">
	        <zipfileset file="${dist.dir}/cli/railo" filemode="711" prefix="" />
		</zip>
 	</target>

	<target name="build.cli.exe" description="creates an jar with the libs cli" depends="build.cli">
		<property name="cfmlprojects.sign.exe.cert" value=""/>
		<property name="cfmlprojects.sign.exe.key" value=""/>
		<property name="cfmlprojects.sign.exe.passphrase" value=""/>
		<!-- openssl rsa -in project.key -outform PVK -pvk-strong -out project.pvk -->
        <jar2exe
        	jar="${dist.dir}/cli/railo-cli.jar" exe="${dist.dir}/cli/railo.exe"
        	icon="${src.dir}/resources/railo.ico" mutexName="railo.cli.Console"
        	headerType="console" customProcName="false" stayAlive="true"
            certfile="${cfmlprojects.sign.exe.cert}" keyfile="${cfmlprojects.sign.exe.key}"
        	keypass="${cfmlprojects.sign.exe.passphrase}">
        	<jre-element>
                <jre path="./jre/" minVersion="1.6.0">
                  <opt>-Duser.dir="%OLDPWD%";</opt>
                </jre>
        	</jre-element>
        </jar2exe>
		<zip destfile="${dist.dir}/cli/railo.win32.zip">
	        <zipfileset file="${dist.dir}/cli/railo.exe" prefix=""/>
		</zip>
	</target>

 	<target name="build.cli.jre" depends="build.cli.bin, build.cli.exe">
 		<echo message="bundling ${jre.version} jre" />
		<dependency groupId="oracle" artifactId="jre" version="${jre.version}" type="zip" classifier="win32" />
		<dependency groupId="oracle" artifactId="jre" version="${jre.version}" type="zip" classifier="win64" />
		<dependency groupId="oracle" artifactId="jre" version="${jre.version}" type="zip" classifier="linux32" />
		<dependency groupId="oracle" artifactId="jre" version="${jre.version}" type="zip" classifier="linux64" />
		<dependency groupId="oracle" artifactId="jre" version="${jre.version}" type="zip" classifier="darwin64" />
		<zip destfile="${dist.dir}/cli/cli-jre-win32.zip">
			<zipfileset prefix="jre" src="${maven.repo.local}/oracle/jre/${jre.version}/jre-${jre.version}-win32.zip"/>
	        <fileset file="${dist.dir}/cli/railo.exe" />
		</zip>
		<zip destfile="${dist.dir}/cli/cli-jre-win64.zip">
			<zipfileset prefix="jre" src="${maven.repo.local}/oracle/jre/${jre.version}/jre-${jre.version}-win64.zip"/>
	        <fileset file="${dist.dir}/cli/railo.exe" />
		</zip>
		<zip destfile="${dist.dir}/cli/cli-jre-linux32.zip">
			<zipfileset prefix="jre" src="${maven.repo.local}/oracle/jre/${jre.version}/jre-${jre.version}-linux32.zip"/>
	        <zipfileset file="${dist.dir}/cli/railo" filemode="711" prefix="" />
		</zip>
		<zip destfile="${dist.dir}/cli/cli-jre-linux64.zip">
			<zipfileset prefix="jre" src="${maven.repo.local}/oracle/jre/${jre.version}/jre-${jre.version}-linux64.zip"/>
	        <zipfileset file="${dist.dir}/cli/railo" filemode="711" prefix="" />
		</zip>
		<zip destfile="${dist.dir}/cli/cli-jre-darwin64.zip">
			<zipfileset prefix="jre" src="${maven.repo.local}/oracle/jre/${jre.version}/jre-${jre.version}-darwin64.zip"/>
	        <zipfileset file="${dist.dir}/cli/railo" filemode="711" prefix="" />
		</zip>
		<pom-and-deploy pomid="cli-jre.pom" packaging="pom" buildtype="${mvn.type}"
		 groupId="org.getrailo" artifactId="railo.cli.jre" version="${cli.version}" name="railo.cli.jre">
			<attachments>
        		<attach file="${dist.dir}/cli/cli-jre-win32.zip" type="zip" classifier="win32"/>
        		<attach file="${dist.dir}/cli/cli-jre-win64.zip" type="zip" classifier="win64"/>
        		<attach file="${dist.dir}/cli/cli-jre-linux32.zip" type="zip" classifier="linux32"/>
        		<attach file="${dist.dir}/cli/cli-jre-linux64.zip" type="zip" classifier="linux64"/>
        		<attach file="${dist.dir}/cli/cli-jre-darwin64.zip" type="zip" classifier="darwin64"/>
			</attachments>
		</pom-and-deploy>
 	</target>

 	<target name="build.cli.express" depends="build.cli">
 		<build-cli-express jre.version="${jre.version}" />
 	</target>

	<macrodef name="build-cli-express">
		<attribute name="jre.version" />
		<sequential>
	 		<delete dir="${temp.dir}/express" />
	 		<mkdir dir="${temp.dir}/express" />
	 		<mkdir dir="${dist.dir}/express" />
	 		<mkdir dir="${temp.dir}/express/webroot" />
	 		<echo message="bundling @{jre.version} jre" />
	 		<echo file="${temp.dir}/express/start.bat">%CD%\railo -server -background --port 8888 --war %CD%\webroot --open-browser true --open-url /</echo>
	 		<echo file="${temp.dir}/express/start.cmd">#!/bin/bash
reldir=`dirname $0`
cd $reldir/build
./railo -server -background --port 8888 --war %CD%\webroot --open-browser true --open-url /
</echo>
	 		<echo file="${temp.dir}/express/webroot/index.cfm"><![CDATA[<cfoutput><h2>Welcome to Railo!</h2><cfdump var="#server#"/></cfoutput>]]></echo>
			<zip destfile="${dist.dir}/express/cli-express-jre-win32.zip">
				<zipgroupfileset file="${maven.repo.local}/oracle/jre/@{jre.version}/jre-@{jre.version}-win32.zip"/>
		        <fileset file="${dist.dir}/cli/railo.exe" />
		        <fileset file="${temp.dir}/express/start.bat" />
		        <zipfileset dir="${temp.dir}/express/webroot" prefix="webroot/" />
			</zip>
			<zip destfile="${dist.dir}/express/cli-express-jre-win64.zip">
				<zipgroupfileset file="${maven.repo.local}/oracle/jre/@{jre.version}/jre-@{jre.version}-win64.zip"/>
		        <fileset file="${dist.dir}/cli/railo.exe" />
		        <fileset file="${temp.dir}/express/start.bat" />
		        <zipfileset dir="${temp.dir}/express/webroot" prefix="webroot/" />
			</zip>
			<zip destfile="${dist.dir}/express/cli-express-jre-linux32.zip">
				<zipgroupfileset file="${maven.repo.local}/oracle/jre/@{jre.version}/jre-@{jre.version}-linux32.zip"/>
		        <zipfileset file="${dist.dir}/cli/railo" filemode="711" prefix="" />
		        <zipfileset dir="${temp.dir}/express/webroot" prefix="webroot/" />
			</zip>
			<zip destfile="${dist.dir}/express/cli-express-jre-linux64.zip">
				<zipgroupfileset file="${maven.repo.local}/oracle/jre/@{jre.version}/jre-@{jre.version}-linux64.zip"/>
		        <zipfileset file="${dist.dir}/cli/railo" filemode="711" prefix="" />
		        <zipfileset dir="${temp.dir}/express/webroot" prefix="webroot/" />
			</zip>
			<zip destfile="${dist.dir}/express/cli-express-jre-darwin64.zip">
				<zipgroupfileset file="${maven.repo.local}/oracle/jre/@{jre.version}/jre-@{jre.version}-darwin64.zip"/>
		        <zipfileset file="${dist.dir}/cli/railo" filemode="711" prefix="" />
		        <zipfileset dir="${temp.dir}/express/webroot" prefix="webroot/" />
			</zip>
			<pom-and-deploy pomid="cli-express.pom" packaging="pom" buildtype="${mvn.type}"
			 groupId="org.getrailo" artifactId="railo.cli.express" version="${cli.version}" name="railo.cli.express">
				<attachments>
	        		<attach file="${dist.dir}/express/cli-express-jre-win32.zip" type="zip" classifier="jre-@{jre.version}-win32"/>
	        		<attach file="${dist.dir}/express/cli-express-jre-win64.zip" type="zip" classifier="jre-@{jre.version}-win64"/>
	        		<attach file="${dist.dir}/express/cli-express-jre-linux32.zip" type="zip" classifier="jre-@{jre.version}-linux32"/>
	        		<attach file="${dist.dir}/express/cli-express-jre-linux64.zip" type="zip" classifier="jre-@{jre.version}-linux64"/>
	        		<attach file="${dist.dir}/express/cli-express-jre-darwin64.zip" type="zip" classifier="jre-@{jre.version}-darwin64"/>
				</attachments>
			</pom-and-deploy>
		</sequential>
	</macrodef>
	
 	<target name="build.cli.mvn" depends="build.cli.rpm,build.cli.deb,build.cli.exe">
		<pom-and-deploy pomid="cli.pom" packaging="pom" buildtype="${mvn.type}"
			groupId="org.getrailo" artifactId="railo.cli" version="${cli.version}"
			name="railo.cli">
			<attachments>
				<attach file="${dist.dir}/cli/railo-cli.jar" type="jar" />
				<attach file="${dist.dir}/cli/railo.bin.zip" type="zip" classifier="bin" />
				<attach file="${dist.dir}/cli/railo.win32.zip" type="zip" classifier="win32" />
				<attach file="${dist.dir}/railo-cli_${cli.version}-1_all.deb" type="deb" />
				<attach file="${rpm.repo}/railo-cli-${cli.version}-1.noarch.rpm" type="rpm" />
			</attachments>
		</pom-and-deploy>
	</target>

 	<target name="build.cli.all" depends="build.cli.mvn,build.cli.jre,build.cli.express">
	</target>

	<target name="build.cli.rpm" depends="build.cli.bin"  xmlns:redline="antlib:org.redline_rpm">
		<mkdir dir="${rpm.repo}" />
		<echo message="Making rpm in ${rpm.repo} Packager:${cli.packager.name} ${cli.packager.email} Version: ${cli.version}" />
		<rpm-create rpm.repo="${rpm.repo}" rpm.release="1"
			rpm.reponame="cfmlprojects" rpm.baseurl="http://cfmlprojects.org/artifacts/RPMS/noarch"
			rpm.group="org.getrailo" rpm.name="railo-cli" rpm.version="${cli.version}"
			rpm.packager="${cli.packager.name} ${cli.packager.email}"
			rpm.url="http://getrailo.org" failonerror="${build.rpm.failonerror}"
			rpm.keyring="${cfmlprojects.sign.keyring}" rpm.key="${cfmlprojects.sign.key.id}" 
			rpm.passphrase="${cfmlprojects.sign.key.passphrase}">
			<tarfileset file="${dist.dir}/cli/railo" prefix="/usr/bin"
				 filemode="744" username="root" group="root"/>
		</rpm-create>
		<!--
		<rpm-sign dir="${rpm.repo}"
			gpgname="${cfmlprojects.sign.key.name}"
			passphrase="${cfmlprojects.sign.key.passphrase}"/>
		-->
	</target>

	<target name="build.cli.deb" depends="build.cli.bin" description="builds a .deb file for debian-based systems">
	   	<echo message="Creating debian .deb file from: ${dist.dir}"/>
		<property name="deb.repo" value="${cfdistro.basedir}/artifacts/debs/noarch" />
		<mkdir dir="${deb.repo}"/>
	   	<delete file="${dist.dir}/railo-cli_${cli.version}-1_all.deb" />
		<taskdef-dependency name="debtask" classname="debrepo.ant.DebTask" artifactId="debrepo" groupId="org.cfmlprojects" version="1.0.0" />
	   	<debtask
	        todir="${dist.dir}"
	        package="railo-cli"
	        section="web"
	        depends="java-common"
            key="${cfmlprojects.sign.key.id}" passphrase="${cfmlprojects.sign.key.passphrase}"
    		keyring="${cfmlprojects.sign.keyring}">
	        <version upstream="${cli.version}"/>
	        <maintainer name="${cli.packager.name}" email="${cli.packager.email}"/>
	        <description synopsis="Railo CFML Engine">Railo is a high performance CFML engine.  Version: ${railo.version.long}.</description>
	   		<tarfileset file="${dist.dir}/cli/railo" prefix="usr/local/bin" filemode="755"/>
	   	</debtask>
	   	<echo message="Updating apt (deb) repo in ${deb.repo}"/>
		<copy file="${dist.dir}/railo-cli_${cli.version}-1_all.deb" todir="${deb.repo}" />
		<deb-repo dir="${deb.repo}"
			label="cfmlprojects" description="cfmlprojects.org debian repository"
            key="${cfmlprojects.sign.key.id}" passphrase="${cfmlprojects.sign.key.passphrase}"
    		keyring="${cfmlprojects.sign.keyring}" />
	</target>

<!-- 
**************************************************************************
ONE JAR version.  Eats a *lot* of memory but doesn't write anything to disk
**************************************************************************
-->

	<macrodef name="configure-railo-web">
		<attribute name="railo-jar" default="${railo.lib.dir}/railo-jar-${railo.version}.jar" />
		<attribute name="config-web" />
		<attribute name="config-server" />
		<attribute name="dump-cfc" />
		<sequential>
			<dependency groupId="org.getrailo" artifactId="railo.config" version="${railo.version.long}" dest="${temp.dir}/railoconfigs" unzip="true" type="zip" />
			<property name="extracted" value="${temp.dir}/railoconfigs" />
			<copy file="${extracted}/server.xml" tofile="@{config-server}" overwrite="true" />
			<copy file="${extracted}/web.xml" tofile="@{config-web}" overwrite="true" />
		</sequential>
	</macrodef>

	<macrodef name="one-jar-macro">
		<attribute name="destfile" default="one-jar.jar" />
		<attribute name="manifest" />
		<attribute name="mainmanifest" />
		<attribute name="onejarboot"/>
		<element name="main" />
		<element name="top" optional="true"/>
		<element name="lib" optional="true"/>
		<element name="binlib" optional="true"/>
        <element name="wrap" optional="true"/>      
		<sequential>
			<tempfile prefix="one-jar-" property="tmp.dir" />
			<property name="tmp.jar.dir" value="${tmp.dir}/jars"/>
			<echo>tmp.jar.dir=${tmp.jar.dir}</echo>
			<mkdir dir="${tmp.jar.dir}"/>
            <mkdir dir="${tmp.dir}/top" />
			<copy todir="${tmp.dir}/top">
				<top/>
			</copy>
            <mkdir dir="${tmp.dir}/main" />
			<copy todir="${tmp.dir}/main" >
				<main/>
			</copy>
			<mkdir dir="${tmp.jar.dir}/lib" />
			<copy todir="${tmp.jar.dir}/lib">
				<lib/>
                <fileset dir="." excludes="**"/>
			</copy>
            <mkdir dir="${tmp.jar.dir}/wrap" />
            <copy todir="${tmp.jar.dir}/wrap">
                <wrap/>
                <fileset dir="." excludes="**"/>
            </copy>
			<mkdir dir="${tmp.jar.dir}/binlib" />
			<copy todir="${tmp.jar.dir}/binlib" >
				<binlib/>
				<fileset dir="." excludes="**"/>
			</copy>
			<unjar dest="${tmp.jar.dir}" src="@{onejarboot}">
                <patternset>
                    <include name="**/*.class"/>
                    <include name=".version"/>   
                    <include name="doc/**"/>   
                </patternset>
            </unjar>            
			<mkdir dir="${tmp.jar.dir}/main"/>
			<jar destfile="${tmp.jar.dir}/main/main.jar" manifest="@{mainmanifest}">
				<fileset dir="${tmp.dir}/main">
					<include name="**/*"/>
				</fileset>
			</jar>
			<jar destfile="@{destfile}" manifest="@{manifest}">
				<fileset dir="${tmp.jar.dir}">
					<include name="**/*"/>
				</fileset>
				<fileset dir="${tmp.dir}/top">
					<include name="**/*"/>
				</fileset>
			</jar>
			<delete dir="${tmp.dir}"/>
			<echo>Created @{destfile}</echo>
		</sequential>
	</macrodef>

    <property name="onejar.ant.tasks.jar" location="${ant.home}/lib/one-jar-ant-task-0.97.jar" />
    <property name="onejarboot.ant.tasks.jar" location="${ant.home}/lib/one-jar-boot-0.97.jar" />
    <property name="onejar.ant.tasks.bootstrap.location" value="http://softlayer.dl.sourceforge.net/project/one-jar/one-jar/one-jar-0.97/one-jar-ant-task-0.97.jar" />
    <property name="onejarboot.ant.tasks.bootstrap.location" value="http://one-jar.cvs.sourceforge.net/*checkout*/one-jar/one-jar/dist/one-jar-boot-0.96.jar" />
    <available property="onejar.ant.tasks.jar.exists" file="${onejar.ant.tasks.jar}" />

    <!-- This will download the "latest version" of the maven-ant-tasks if needed -->
    <target name="bootstrap_onejar" unless="onejar.ant.tasks.jar.exists">
        <get src="${onejar.ant.tasks.bootstrap.location}" dest="${onejar.ant.tasks.jar}" />
        <get src="${onejarboot.ant.tasks.bootstrap.location}" dest="${onejarboot.ant.tasks.jar}" />
    </target>

	<target name="build.cli.onejar">
		<runwar.initprops />
		<taskdef name="one-jar" classname="com.simontuffs.onejar.ant.OneJarTask" 
        	classpath="${onejar.ant.tasks.jar}" onerror="report"/>
   		<delete dir="${temp.dir}/cli" />
		<mkdir dir="${temp.dir}/cli" />
		<mkdir dir="${dist.dir}/cli" />
        <javac-ecj srcdir="${src.dir}/java" destdir="${temp.dir}/cli" 
        	compliance="${railo.javac.compiler}" classpath="${toString:classpath}" />
        <one-jar destfile="${dist.dir}/cli/railo-cli.jar">
			<manifest>
				<attribute name="Main-Class" value="com.simontuffs.onejar.Boot" />
				<attribute name="One-Jar-Main-Class" value="railocli.CLIMain" />
			</manifest>
			<main>
		        <fileset dir="${temp.dir}/cli" />
			</main>
            <lib>
            	<fileset file="${railobuild.dist.dir}/jar/railo-${railo.version.long}.jar" />
		        <fileset dir="${railo.lib.dir}">
		            <exclude name="**/railo-loader.jar"/>
		            <include name="**/*.jar"/>
		        </fileset>
            </lib>
        </one-jar>
        <concat destfile="${dist.dir}/cli/railo" force="yes" binary="true">
          <fileset file="${src.dir}/bin/railo.sh" />
          <fileset file="${dist.dir}/cli/railo-cli.jar" />
        </concat>
        <chmod file="${dist.dir}/cli/railo" perm="a+x"/>
        <!-- 
        <jar2exe jar="${dist.dir}/cli/railo-cli.jar" exe="${dist.dir}/cli/railo-cli.exe" icon="${src.dir}/resources/railo.ico" />
         -->
	</target>	

	<macrodef name="packjars">
	    <attribute name="dir"/>
	    <attribute name="packdir"/>
	    <sequential>
	    	<antcontrib:for param="file">
	    	  <path>
	    	    <fileset dir="@{dir}" includes="*.jar"/>
	    	  </path>
	    	  <sequential>
	    	  	<antcontrib:var name="pack200.destdir" unset = "true"/> 
	    	  	<property name="pack200.destdir" location="@{packdir}"/> 
	    	  	<antcontrib:var name="pack200.destfile" unset = "true"/> 
                <basename property="pack200.destfile" file="@{file}" /> 
	    	  	<echo message="packing @{file}"/>
		        <exec executable="${java.home}/bin/pack200" resultproperty="pack.resultcode">
		            <arg value="${pack200.destdir}/${pack200.destfile}.pack.gz"/>
		            <arg value="@{file}"/>
		        </exec>
	    	  	<antcontrib:if>
	    	  		<equals arg1="${pack.resultcode}" arg2="0" />
	    	  		<else>
	    	  			<copy file="@{file}" todir="@{packdir}" verbose="false"/>
	    	  			<delete file="${pack200.destdir}/${pack200.destfile}.pack.gz" quiet="true" verbose="false"/>
	    	  		</else>
	    	  	</antcontrib:if>
	    	  	<antcontrib:var unset="true" name="pack.resultcode" />
	    	  </sequential>
	    	</antcontrib:for>
	    	
<!--
	        <apply executable="pack200" parallel="false" outputproperty="packoutput">
	            <arg value=" - - repack"/>
	            <fileset dir="@{rootdir}" includes="**/*.jar" />
	        </apply>
	    	<echo message="${packoutput}" />
	        <echo message="Signing libs in @{rootdir}"/>
	        <signjar 
	            alias="${keystore.alias}" keystore="${keystore.file}" storepass="${keystore.password}"
	            lazy="true">
	            <path>
	                <fileset dir="@{rootdir}" includes="**/*.jar" />
	            </path>
	        </signjar>
-->	        
	     </sequential>
	</macrodef>
		
</project>
